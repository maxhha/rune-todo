{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Note","props","translit","cyrillicToTranslit","transform","text","react_default","a","createElement","className","onClick","onComplite","listIndex","NoteEditor","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","value","target","handlePush","onCreateNote","state","onChange","placeholder","React","Component","App","_this2","data","errorMessage","handleCreateNote","notes","slice","indexOf","push","handleNoteComplite","index","splice","handleToTop","refToTop","current","scrollIntoView","behavior","localStorage","getItem","JSON","parse","e","console","error","createRef","_this3","ref","App_NoteEditor","react_transition_group","transitionName","transitionEnterTimeout","transitionLeaveTimeout","map","i","key","href","rel","stringify","setItem","prevProps","prevState","saveNotesToStorage","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f89005ac.chunk.js","sourcesContent":["import React from 'react';\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport cyrillicToTranslit from 'cyrillic-to-translit-js';\nimport './App.css';\n\nfunction Note(props){\n    const translit = cyrillicToTranslit().transform(props.text);\n    return (\n        <li className=\"note\">\n            <div className=\"note__rune\">\n                <span>{translit[0]}</span>\n            </div>\n            <div className=\"note-content note__content\">\n                <div className=\"note-content__rune-text\">\n                    {translit}\n                </div>\n                <div className=\"note-content__text\">\n                    {props.text}\n                </div>\n            </div>\n            <div className=\"note__complite-wrapper\">\n                <button\n                    className=\"complite-button\"\n                    onClick={() => props.onComplite(props.listIndex)}\n                />\n            </div>\n        </li>\n    );\n}\n\nclass NoteEditor extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            value: \"\"\n        }\n    }\n    handleChange = (event) => {\n        this.setState({value: event.target.value});\n    }\n    handlePush = () => {\n        this.props.onCreateNote(this.state.value);\n        this.setState({value: \"\"});\n    }\n    render() {\n        return (\n            <div className={\"note-editor \" + this.props.className}>\n                <textarea\n                    className=\"note-editor__textarea\"\n                    value={this.state.value}\n                    onChange = {this.handleChange}\n                    placeholder=\"Write todo here\"\n                    />\n                <button\n                    className=\"note-editor__push\"\n                    onClick={this.handlePush}\n                >PUSH</button>\n            </div>\n        );\n    }\n}\n\nclass App extends React.Component {\n    constructor(props){\n        super(props);\n        let data;\n        let errorMessage;\n        try {\n            data = localStorage.getItem('notes') || \"[]\";\n            data = JSON.parse(data);\n        } catch(e) {\n            errorMessage =\n                \"Error of reading local storage. All data was cleared.\";\n            console.error(e);\n        }\n        this.refToTop = React.createRef();\n        this.state = {\n            notes: data,\n            errorMessage: errorMessage,\n        }\n    }\n    handleCreateNote = (text) => {\n        const notes = this.state.notes.slice();\n        if (!text || notes.indexOf(text) >= 0){\n            return;\n        }\n        notes.push(text);\n        this.setState({notes: notes})\n    }\n    handleNoteComplite = (index) => {\n        const notes = this.state.notes.slice();\n        notes.splice(index, 1);\n        this.setState({notes: notes})\n    }\n    handleToTop = () => {\n        this.refToTop.current.scrollIntoView({behavior: 'smooth'});\n    }\n    render() {\n        const notes = this.state.notes;\n\n        return (\n            <div className=\"app\" ref={this.refToTop}>\n                <header className=\"header\">\n                    <h1 className=\"header__title\">RUNE TODO</h1>\n\n                    <h2 className=\"header__runes\">rune todo</h2>\n                </header>\n                <div className=\"content\">\n                    <div className=\"content__inner\">\n                        {this.state.errorMessage ? (<div className=\"error-message\">{this.state.errorMessage}</div>) : \"\"}\n                        <NoteEditor\n                            className = \"content__note-editor\"\n                            onCreateNote = {this.handleCreateNote}/>\n                        <hr className=\"content__hr circled-hr\"/>\n                        <ul className=\"notes-list\">\n                            <CSSTransitionGroup\n                                transitionName=\"note_animation\"\n                                transitionEnterTimeout={300}\n                                transitionLeaveTimeout={300}>\n\n                                {notes.map((text, i) =>\n                                    <Note\n                                        key={text}\n                                        text={text}\n                                        listIndex={i}\n                                        onComplite={this.handleNoteComplite}\n                                    />\n                                )}\n                            </CSSTransitionGroup>\n                        </ul>\n                        <button\n                            className=\"to-top-button content__to-top\"\n                            onClick={this.handleToTop}>TO TOP</button>\n\n                    </div>\n                </div>\n                <footer className=\"footer\">made by <a href=\"https://github.com/maxhha\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\">max_hha</a></footer>\n            </div>\n        )\n    }\n    saveNotesToStorage() {\n        try {\n            let data = JSON.stringify(this.state.notes);\n            localStorage.setItem('notes', data);\n        } catch(e) {\n            this.setState({\n                errorMessage: \"Error on save data.\"\n            });\n            console.error(e);\n        }\n    }\n    componentDidUpdate(prevProps, prevState){\n        if (prevState.notes !== this.state.notes) {\n            this.saveNotesToStorage();\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}